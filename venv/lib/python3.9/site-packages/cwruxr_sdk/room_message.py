from typing import Optional, Union
from cwruxr_sdk.common import Color, Vector3

class RoomMessage:
    def __init__(
            self,
            id : Optional[str] = None,
            logging : Optional[bool] = None,
            skyboxURL : Optional[str] = None,
            skyboxBrightness : Optional[float] = None,
            directionalLightIntensity : Optional[float] = None,
            directionalLightColor : Optional[Color] = None,
            directionalLightRotation : Optional[Vector3] = None
        ):
        """
        Initialization function.

        Arguments:
        id -- The room ID.
        logging -- Whether or not to enable logging for this room.
        skyboxURL -- The url for the custom skybox. Will use the default if None.
        skyboxBrightness -- A multiplier for the brighness of the Skybox.
        directionalLightIntensity -- A multiplier for the intensity of the directional light. Default = 0.75
        directionalLightColor -- The color of the directional light.
        directionalLightRotation -- The rotation
        """
        self.id = id
        if logging != None:
            self.logging = logging
        if skyboxURL != None:
            self.skyboxURL = skyboxURL
        if skyboxBrightness != None:
            self.skyboxBrightness = skyboxBrightness
        if directionalLightIntensity != None:
            self.directionalLightIntensity = directionalLightIntensity
        if directionalLightColor != None:
            self.directionalLightColor = directionalLightColor
        if directionalLightRotation != None:
            self.directionalLightRotation = directionalLightRotation

    @classmethod
    def FromDict(cls, data : dict):
        """
        Method to get a room message out of a dictionary.
        """
        if data == None:
            return cls()
        
        val = cls(
            data.get("id"),
            data.get("logging"),
            data.get("skyboxURL"),
            data.get("skyboxBrightness"),
            data.get("directionalLightIntensity"),
            Color.FromDict(data.get("directionalLightColor")),
            Vector3.FromDict(data.get("directionalLightRotation")),
        )
        return val
        